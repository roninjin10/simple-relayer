/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MockAttestationDisputeGameInterface extends utils.Interface {
  functions: {
    "bondManager()": FunctionFragment;
    "createdAt()": FunctionFragment;
    "extraData()": FunctionFragment;
    "gameType()": FunctionFragment;
    "getChallengers()": FunctionFragment;
    "initialize()": FunctionFragment;
    "resolve()": FunctionFragment;
    "rootClaim()": FunctionFragment;
    "setBondId(bytes32)": FunctionFragment;
    "setBondManager(address)": FunctionFragment;
    "setExtraData(bytes)": FunctionFragment;
    "setGameStatus(uint8)": FunctionFragment;
    "setRootClaim(bytes32)": FunctionFragment;
    "splitResolve()": FunctionFragment;
    "status()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bondManager"
      | "createdAt"
      | "extraData"
      | "gameType"
      | "getChallengers"
      | "initialize"
      | "resolve"
      | "rootClaim"
      | "setBondId"
      | "setBondManager"
      | "setExtraData"
      | "setGameStatus"
      | "setRootClaim"
      | "splitResolve"
      | "status"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bondManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "extraData", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChallengers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBondId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootClaim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "splitResolve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bondManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChallengers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBondId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBondManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRootClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Resolved(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Resolved"): EventFragment;
}

export interface ResolvedEventObject {
  status: number;
}
export type ResolvedEvent = TypedEvent<[number], ResolvedEventObject>;

export type ResolvedEventFilter = TypedEventFilter<ResolvedEvent>;

export interface MockAttestationDisputeGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockAttestationDisputeGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bondManager(
      overrides?: CallOverrides
    ): Promise<[string] & { _bondManager: string }>;

    createdAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _createdAt: BigNumber }>;

    extraData(
      overrides?: CallOverrides
    ): Promise<[string] & { _extraData: string }>;

    gameType(
      overrides?: CallOverrides
    ): Promise<[number] & { _gameType: number }>;

    getChallengers(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rootClaim(
      overrides?: CallOverrides
    ): Promise<[string] & { _rootClaim: string }>;

    setBondId(
      bid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBondManager(
      _bm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExtraData(
      _ed: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGameStatus(
      _gs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRootClaim(
      _rc: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitResolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number] & { _status: number }>;

    version(
      overrides?: CallOverrides
    ): Promise<[string] & { _version: string }>;
  };

  bondManager(overrides?: CallOverrides): Promise<string>;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  extraData(overrides?: CallOverrides): Promise<string>;

  gameType(overrides?: CallOverrides): Promise<number>;

  getChallengers(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rootClaim(overrides?: CallOverrides): Promise<string>;

  setBondId(
    bid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBondManager(
    _bm: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExtraData(
    _ed: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGameStatus(
    _gs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRootClaim(
    _rc: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitResolve(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bondManager(overrides?: CallOverrides): Promise<string>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    extraData(overrides?: CallOverrides): Promise<string>;

    gameType(overrides?: CallOverrides): Promise<number>;

    getChallengers(overrides?: CallOverrides): Promise<string[]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    resolve(overrides?: CallOverrides): Promise<number>;

    rootClaim(overrides?: CallOverrides): Promise<string>;

    setBondId(
      bid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondManager(
      _bm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtraData(
      _ed: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameStatus(
      _gs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootClaim(
      _rc: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    splitResolve(overrides?: CallOverrides): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Resolved(uint8)"(
      status?: PromiseOrValue<BigNumberish> | null
    ): ResolvedEventFilter;
    Resolved(status?: PromiseOrValue<BigNumberish> | null): ResolvedEventFilter;
  };

  estimateGas: {
    bondManager(overrides?: CallOverrides): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    extraData(overrides?: CallOverrides): Promise<BigNumber>;

    gameType(overrides?: CallOverrides): Promise<BigNumber>;

    getChallengers(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rootClaim(overrides?: CallOverrides): Promise<BigNumber>;

    setBondId(
      bid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBondManager(
      _bm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExtraData(
      _ed: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGameStatus(
      _gs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRootClaim(
      _rc: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitResolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bondManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChallengers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rootClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBondId(
      bid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBondManager(
      _bm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExtraData(
      _ed: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGameStatus(
      _gs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRootClaim(
      _rc: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitResolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
