/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockAttestationDisputeGame,
  MockAttestationDisputeGameInterface,
} from "../../../../contracts/test/BondManager.t.sol/MockAttestationDisputeGame";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum GameStatus",
        name: "status",
        type: "uint8",
      },
    ],
    name: "Resolved",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "bondManager",
    outputs: [
      {
        internalType: "contract IBondManager",
        name: "_bondManager",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "createdAt",
    outputs: [
      {
        internalType: "Timestamp",
        name: "_createdAt",
        type: "uint64",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "extraData",
    outputs: [
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gameType",
    outputs: [
      {
        internalType: "enum GameType",
        name: "_gameType",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getChallengers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "resolve",
    outputs: [
      {
        internalType: "enum GameStatus",
        name: "_status",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rootClaim",
    outputs: [
      {
        internalType: "Claim",
        name: "_rootClaim",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "bid",
        type: "bytes32",
      },
    ],
    name: "setBondId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract BondManager",
        name: "_bm",
        type: "address",
      },
    ],
    name: "setBondManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_ed",
        type: "bytes",
      },
    ],
    name: "setExtraData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum GameStatus",
        name: "_gs",
        type: "uint8",
      },
    ],
    name: "setGameStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Claim",
        name: "_rc",
        type: "bytes32",
      },
    ],
    name: "setRootClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "splitResolve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "status",
    outputs: [
      {
        internalType: "enum GameStatus",
        name: "_status",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "_version",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b9b806100206000396000f3fe6080604052600436106100eb5760003560e01c8063609d333411610084578063bbdc02db11610056578063bbdc02db146102ef578063bcef3b5514610303578063cf09e0d014610321578063f4e0c4ed1461033d57005b8063609d33341461028e5780638129fc1c146102a3578063972aff2e146102af578063ba3fcb94146102cf57005b80633fc71fc4116100bd5780633fc71fc4146101a35780634637f07b146101c357806348d3fed3146101d857806354fd4d501461023f57005b806313c4e957146100f4578063200d2ed2146101145780632810e1d61461013e578063363cc4271461015357005b366100f257005b005b34801561010057600080fd5b506100f261010f3660046106cf565b61035f565b34801561012057600080fd5b5060005460ff165b6040516101359190610807565b60405180910390f35b34801561014a57600080fd5b5061012861036f565b34801561015f57600080fd5b50600054610100900473ffffffffffffffffffffffffffffffffffffffff1660405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610135565b3480156101af57600080fd5b506100f26101be36600461081a565b600155565b3480156101cf57600080fd5b506100f2610407565b3480156101e457600080fd5b506100f26101f3366004610833565b6000805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b34801561024b57600080fd5b5060408051808201909152600581527f302e312e3000000000000000000000000000000000000000000000000000000060208201525b60405161013591906108db565b34801561029a57600080fd5b506102816104bc565b3480156100f257600080fd5b3480156102bb57600080fd5b506100f26102ca36600461081a565b600355565b3480156102db57600080fd5b506100f26102ea3660046108ee565b61054e565b3480156102fb57600080fd5b506002610128565b34801561030f57600080fd5b50600154604051908152602001610135565b34801561032d57600080fd5b5060405160008152602001610135565b34801561034957600080fd5b50610352610593565b604051610135919061090f565b600261036b8282610a0b565b5050565b600080546003546040517fdff3dbb2000000000000000000000000000000000000000000000000000000008152600481019190915261010090910473ffffffffffffffffffffffffffffffffffffffff169063dff3dbb290602401600060405180830381600087803b1580156103e457600080fd5b505af11580156103f8573d6000803e3d6000fd5b505060005460ff169392505050565b604080518082019091526001815260026020820181905261042a91600491610601565b506000546003546040517f7c523a6800000000000000000000000000000000000000000000000000000000815261010090920473ffffffffffffffffffffffffffffffffffffffff1691637c523a6891610488916004908101610b25565b600060405180830381600087803b1580156104a257600080fd5b505af11580156104b6573d6000803e3d6000fd5b50505050565b6060600280546104cb90610969565b80601f01602080910402602001604051908101604052809291908181526020018280546104f790610969565b80156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b5050505050905090565b600080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600281111561058b5761058b61079e565b021790555050565b6060600480548060200260200160405190810160405280929190818152602001828054801561054457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105cd575050505050905090565b82805482825590600052602060002090810192821561067b579160200282015b8281111561067b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610621565b5061068792915061068b565b5090565b5b80821115610687576000815560010161068c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156106e157600080fd5b813567ffffffffffffffff808211156106f957600080fd5b818401915084601f83011261070d57600080fd5b81358181111561071f5761071f6106a0565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610765576107656106a0565b8160405282815287602084870101111561077e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610804577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b50565b60208101610814836107cd565b91905290565b60006020828403121561082c57600080fd5b5035919050565b60006020828403121561084557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461086957600080fd5b9392505050565b6000815180845260005b818110156108965760208185018101518683018201520161087a565b818111156108a8576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006108696020830184610870565b60006020828403121561090057600080fd5b81356003811061086957600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561095d57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161092b565b50909695505050505050565b600181811c9082168061097d57607f821691505b6020821081036109b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610a0657600081815260208120601f850160051c810160208610156109e35750805b601f850160051c820191505b81811015610a02578281556001016109ef565b5050505b505050565b815167ffffffffffffffff811115610a2557610a256106a0565b610a3981610a338454610969565b846109bc565b602080601f831160018114610a8c5760008415610a565750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610a02565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610ad957888601518255948401946001909101908401610aba565b5085821015610b1557878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b81811015610b8157845473ffffffffffffffffffffffffffffffffffffffff1683526001948501949284019201610b4f565b509097965050505050505056fea164736f6c634300080f000a";

type MockAttestationDisputeGameConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAttestationDisputeGameConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAttestationDisputeGame__factory extends ContractFactory {
  constructor(...args: MockAttestationDisputeGameConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockAttestationDisputeGame> {
    return super.deploy(overrides || {}) as Promise<MockAttestationDisputeGame>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockAttestationDisputeGame {
    return super.attach(address) as MockAttestationDisputeGame;
  }
  override connect(signer: Signer): MockAttestationDisputeGame__factory {
    return super.connect(signer) as MockAttestationDisputeGame__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAttestationDisputeGameInterface {
    return new utils.Interface(_abi) as MockAttestationDisputeGameInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAttestationDisputeGame {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockAttestationDisputeGame;
  }
}
