/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface Hash_CrossDomainHasherInterface extends utils.Interface {
  functions: {
    "failedCrossDomainHashHighVersion()": FunctionFragment;
    "failedCrossDomainHashV0()": FunctionFragment;
    "failedCrossDomainHashV1()": FunctionFragment;
    "hashCrossDomainMessageHighVersion(uint16,uint240,address,address,uint256,uint256,bytes)": FunctionFragment;
    "hashCrossDomainMessageV0(uint240,address,address,uint256,uint256,bytes)": FunctionFragment;
    "hashCrossDomainMessageV1(uint240,address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "failedCrossDomainHashHighVersion"
      | "failedCrossDomainHashV0"
      | "failedCrossDomainHashV1"
      | "hashCrossDomainMessageHighVersion"
      | "hashCrossDomainMessageV0"
      | "hashCrossDomainMessageV1"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "failedCrossDomainHashHighVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedCrossDomainHashV0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedCrossDomainHashV1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashCrossDomainMessageHighVersion",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashCrossDomainMessageV0",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashCrossDomainMessageV1",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "failedCrossDomainHashHighVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedCrossDomainHashV0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedCrossDomainHashV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashCrossDomainMessageHighVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashCrossDomainMessageV0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashCrossDomainMessageV1",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Hash_CrossDomainHasher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Hash_CrossDomainHasherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    failedCrossDomainHashHighVersion(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    failedCrossDomainHashV0(overrides?: CallOverrides): Promise<[boolean]>;

    failedCrossDomainHashV1(overrides?: CallOverrides): Promise<[boolean]>;

    hashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  failedCrossDomainHashHighVersion(overrides?: CallOverrides): Promise<boolean>;

  failedCrossDomainHashV0(overrides?: CallOverrides): Promise<boolean>;

  failedCrossDomainHashV1(overrides?: CallOverrides): Promise<boolean>;

  hashCrossDomainMessageHighVersion(
    _version: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hashCrossDomainMessageV0(
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hashCrossDomainMessageV1(
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    failedCrossDomainHashHighVersion(
      overrides?: CallOverrides
    ): Promise<boolean>;

    failedCrossDomainHashV0(overrides?: CallOverrides): Promise<boolean>;

    failedCrossDomainHashV1(overrides?: CallOverrides): Promise<boolean>;

    hashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    hashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    hashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    failedCrossDomainHashHighVersion(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failedCrossDomainHashV0(overrides?: CallOverrides): Promise<BigNumber>;

    failedCrossDomainHashV1(overrides?: CallOverrides): Promise<BigNumber>;

    hashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    failedCrossDomainHashHighVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedCrossDomainHashV0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedCrossDomainHashV1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
