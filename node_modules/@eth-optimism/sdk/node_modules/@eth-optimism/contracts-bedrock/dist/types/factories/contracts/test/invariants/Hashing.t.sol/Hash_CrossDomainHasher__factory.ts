/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  Hash_CrossDomainHasher,
  Hash_CrossDomainHasherInterface,
} from "../../../../../contracts/test/invariants/Hashing.t.sol/Hash_CrossDomainHasher";

const _abi = [
  {
    inputs: [],
    name: "failedCrossDomainHashHighVersion",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "failedCrossDomainHashV0",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "failedCrossDomainHashV1",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_version",
        type: "uint16",
      },
      {
        internalType: "uint240",
        name: "_nonce",
        type: "uint240",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "hashCrossDomainMessageHighVersion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint240",
        name: "_nonce",
        type: "uint240",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "hashCrossDomainMessageV0",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint240",
        name: "_nonce",
        type: "uint240",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "hashCrossDomainMessageV1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a2c4a7dc11610050578063a2c4a7dc146100b2578063b32fcf9a146100d3578063e0136234146100e657600080fd5b806308c5bb611461007757806340e15e041461008c578063931dad1a1461009f575b600080fd5b61008a6100853660046105be565b6100f8565b005b61008a61009a36600461065a565b61015a565b61008a6100ad36600461065a565b6101bc565b6000546100bf9060ff1681565b604051901515815260200160405180910390f35b6000546100bf9062010000900460ff1681565b6000546100bf90610100900460ff1681565b6000610106878960f01b1790565b9050610116818787878787610241565b5060018861ffff16111561015057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b5050505050505050565b85600061016b828888888888610241565b9050600061017b87898686610313565b90508082146101b157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b505050505050505050565b7e01000000000000000000000000000000000000000000000000000000000000861760006101ee828888888888610241565b90506000610200838989898989610332565b90508082146101b157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1662010000179055505050505050505050565b600060f087901c8082036102635761025b8688858b610313565b915050610309565b8061ffff1660010361027d5761025b888888888888610332565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f48617368696e673a20756e6b6e6f776e2063726f737320646f6d61696e206d6560448201527f73736167652076657273696f6e00000000000000000000000000000000000000606482015260840160405180910390fd5b9695505050505050565b600061032185858585610355565b805190602001209050949350505050565b60006103428787878787876103ee565b8051906020012090509695505050505050565b60608484848460405160240161036e9493929190610746565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcbd4ece9000000000000000000000000000000000000000000000000000000001790529050949350505050565b606086868686868660405160240161040b96959493929190610790565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd764ad0b0000000000000000000000000000000000000000000000000000000017905290509695505050505050565b80357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811681146104bb57600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146104bb57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261052457600080fd5b813567ffffffffffffffff8082111561053f5761053f6104e4565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610585576105856104e4565b8160405283815286602085880101111561059e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156105d957600080fd5b873561ffff811681146105eb57600080fd5b96506105f96020890161048d565b9550610607604089016104c0565b9450610615606089016104c0565b93506080880135925060a0880135915060c088013567ffffffffffffffff81111561063f57600080fd5b61064b8a828b01610513565b91505092959891949750929550565b60008060008060008060c0878903121561067357600080fd5b61067c8761048d565b955061068a602088016104c0565b9450610698604088016104c0565b9350606087013592506080870135915060a087013567ffffffffffffffff8111156106c257600080fd5b6106ce89828a01610513565b9150509295509295509295565b6000815180845260005b81811015610701576020818501810151868301820152016106e5565b81811115610713576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152506080604083015261077f60808301856106db565b905082606083015295945050505050565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a08301526107db60c08301846106db565b9897505050505050505056fea164736f6c634300080f000a";

type Hash_CrossDomainHasherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Hash_CrossDomainHasherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Hash_CrossDomainHasher__factory extends ContractFactory {
  constructor(...args: Hash_CrossDomainHasherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Hash_CrossDomainHasher> {
    return super.deploy(overrides || {}) as Promise<Hash_CrossDomainHasher>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Hash_CrossDomainHasher {
    return super.attach(address) as Hash_CrossDomainHasher;
  }
  override connect(signer: Signer): Hash_CrossDomainHasher__factory {
    return super.connect(signer) as Hash_CrossDomainHasher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Hash_CrossDomainHasherInterface {
    return new utils.Interface(_abi) as Hash_CrossDomainHasherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Hash_CrossDomainHasher {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Hash_CrossDomainHasher;
  }
}
