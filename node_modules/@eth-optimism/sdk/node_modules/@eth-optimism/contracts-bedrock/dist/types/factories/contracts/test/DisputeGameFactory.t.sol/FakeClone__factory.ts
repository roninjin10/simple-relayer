/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  FakeClone,
  FakeCloneInterface,
} from "../../../../contracts/test/DisputeGameFactory.t.sol/FakeClone";

const _abi = [
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603c80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638129fc1c14602d575b600080fd5b00fea164736f6c634300080f000a";

type FakeCloneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FakeCloneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FakeClone__factory extends ContractFactory {
  constructor(...args: FakeCloneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FakeClone> {
    return super.deploy(overrides || {}) as Promise<FakeClone>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FakeClone {
    return super.attach(address) as FakeClone;
  }
  override connect(signer: Signer): FakeClone__factory {
    return super.connect(signer) as FakeClone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FakeCloneInterface {
    return new utils.Interface(_abi) as FakeCloneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FakeClone {
    return new Contract(address, _abi, signerOrProvider) as FakeClone;
  }
}
